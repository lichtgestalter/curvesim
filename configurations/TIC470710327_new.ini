; Source: https://arxiv.org/pdf/2202.06964.pdf

[DEFAULT]

[Astronomical Constants]
# you may use the astronomical constants defined in this section in all following sections, e.g. scope_ecl = 1.9 * AU
g  = 6.67430e-11            # [m**3/kg/s**2] <float> gravitational constant +/- 0.00015
au = 1.495978707e11         # [m]   <float> astronomical unit
r_sun = 6.96342e8           # [m]   <float> sun radius
m_sun = 1.98847e30          # [kg]  <float> sun mass +/- 0.00007
l_sun = 3.83e26             # [W]   <float> solar luminosity
r_jup = 7.1492e7            # [m]   <float> earth radius
m_jup = 1.8981246e27        # [kg]  <float> earth mass
r_earth = 6.378135e6        # [m]   <float> earth radius
m_earth = 5.9720e24         # [kg]  <float> earth mass
v_earth = 2.97852e4         # [m/s] <float> earth orbital velocity (if orbit was circular)

[Video]
video_file = animations/TIC470710327_new.mp4  # <string> the resulting video is saved with this file name
frames = 30               # <int>   number of frames of video. Proportional to this program's run time and to the lenght of the animation.
fps = 30                  # <int>   frames per second in video. Proportional to the velocity of the objects in the animation. Inverse proportional to lenght of video.
dt = 60                   # [s] <int>   time difference between iterations. Proportional to the velocity of the objects in the animation. Needs to be small in order to calculate accurately when objects are near to each other.
sampling_rate = 6         # <int>   Calculating the physics is much faster than animating it. Therefore only 1/sampling_rate of the calculated iterations is used as frame in the animation.


[Astronomical Constants]
# you may use the astronomical constants defined in this section in all following sections, e.g. scope_ecl = 1.9 * AU
g  = 6.67430e-11            # [m**3/kg/s**2] <float> gravitational constant +/- 0.00015
au = 1.495978707e11         # [m]   <float> astronomical unit
r_sun = 6.96342e8           # [m]   <float> sun radius
m_sun = 1.98847e30          # [kg]  <float> sun mass +/- 0.00007
l_sun = 3.83e26             # [W]   <float> solar luminosity
r_jup = 7.1492e7            # [m]   <float> earth radius
m_jup = 1.8981246e27        # [kg]  <float> earth mass
r_earth = 6.378135e6        # [m]   <float> earth radius
m_earth = 5.9720e24         # [kg]  <float> earth mass
v_earth = 2.97852e4         # [m/s] <float> earth orbital velocity (if orbit was circular)

[Video]
video_file = animations/SolarSystemTest.mp4  # <string> the resulting video is saved with this file name
frames = 10                # <int>   number of frames of video. Proportional to this program's run time and to the lenght of the animation.
fps = 30                    # <int>   frames per second in video. Proportional to the velocity of the objects in the animation. Inverse proportional to lenght of video.
dt = 3600                  # [s] <int>   time difference between iterations. Proportional to the velocity of the objects in the animation. Needs to be small in order to calculate accurately when objects are near to each other.
sampling_rate = 72          # <int>   Calculating the physics is much faster than animating it. Therefore only 1/sampling_rate of the calculated iterations is used as frame in the animation.




[Scale]
scope_ecl = 0.9 * au      # [m] <float> height of eclipse view plotting window in meters. Middle of window is (0.0, 0.0)
star_scale_ecl = 1.0      # [1] <float> animate stars with StarScale_ecl times enlarged radius in eclipse view
planet_scale_ecl = 50.0   # [1] <float> animate planets with PlanetScale_ecl times enlarged radius in eclipse view
scope_top = 0.9 * au      # [m] <float> height of top view plotting window in meters. Middle of window is (0.0, 0.0)
star_scale_top = 1.0      # [1] <float> animate stars with StarScale_top times enlarged radius in top view
planet_scale_top = 50.0   # [1] <float> animate planets with PlanetScale_top times enlarged radius in top view
autoscaling = off         # <string> allowed values: on, off
min_radius = 0.5          # [%] <float> (if autoscale on) radius of smallest body in animation relative to plot scope. radius=1 would fill the whole plot.
max_radius = 3.0          # [%] <float> (if autoscale on) maximum radius of largest body in animation relative to plot scope. radius=1 would fill the whole plot. If necessary, scaling will be done logaritmically instead of linear

[Plot]
x_unit = d                # <string> allowed values: s (seconds), h (hours), d (days), m (months), y (years)
# adjust the following plot parameters in this section only if the plots do not fit well on your screen
figure_width = 16         # <int>   width of figure which contains all plots and animations
figure_height = 8         # <int>   height of figure which contains all plots and animations
xlim = 1.25               # <float> top-View and eclipse-view both show x-values between -Xlim and + Xlim
ylim = 1.0                # <float> top-View and eclipse-view both show y-values between -Ylim and + Ylim
red_dot_height = 1/13     # <float> relative height of red dot in lightcurve plot
red_dot_width = 1/200     # <float> relative width of red dot in lightcurve plot

# all following sections define physical bodies in the simulation
# the section names define the names of the bodies
;[ExampleBody]




[TIC 470710327 A]
body_type = star
mass = 6.5 * m_sun
radius = 2.0 * r_sun #2.0
luminosity = 2**3.14 * l_sun
startposition = 0.0, 3620798086.0, 0.0
velocity = -235000.0, -85118.0, -12688.0
beta = 2.3
color = 0.99, 0.99, 0.01

[TIC 470710327 B]
body_type = star
mass = 5.9 * m_sun
radius = 1.5 * r_sun #1.5
luminosity = 2**3.08 * l_sun #2**3.08
startposition = 0.0, -3620798086.0, 0.0
velocity = 235000.0, -85118.0, -12688.0
beta = 2.3
color = 0.01, 0.01, 0.99

[TIC 470710327 C]
body_type = star
mass = 15.25 * m_sun
radius = 6.5 * r_sun
luminosity = 2**4.79 * l_sun
startposition = 123338343881.0, 0.0, 0.0
velocity = 0.0, 85118.0, 12688.0
beta = 2.3
color = 0.99, 0.01, 0.99